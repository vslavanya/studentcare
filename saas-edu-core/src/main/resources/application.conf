# In this file you can override any option defined in the reference files.
# Copy in parts of the reference files and modify as you please.

akka {
	camel.jmx=off
	camel{
		context-provider = akka.camel.DefaultContextProvider
		streamingCache = on
		consumer{
			auto-ack=on
			reply-timeout=10000s
			activation-timeout = 1000s
		}
		conversions{
			"file"= "java.io.InputStream"
		}
	}

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "ERROR"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = on
  log-dead-letters-during-shutdown = on
  

  actor {
  	debug{
  		lifecycle = on
  		unhandled = on
  		event-stream = on
  	}
    provider = "akka.cluster.ClusterActorRefProvider"
	creation-timeout = 900s
	serialize-messages = off
	serialize-creators = off
  }

  remote {
  	log-remote-lifecycle-events = off
  	enabled-transports = ["akka.remote.netty.tcp"]
    # The port clients should connect to. Default is 2552.
    netty.tcp.send-buffer-size = 256000000b
    netty.tcp.receive-buffer-size = 256000000b
    netty.tcp.maximum-frame-size = 128000000b
  }
  cluster{
	  retry-unsuccessful-join-after = 2s
	  jmx.enabled=on
	  log-info = on
	  roles =[compute]
	  metrics.enabled=on
	  gossip-time-to-live = 10s
	  use-dispatcher = cluster-dispatcher
	  failure-detector{
	  	heartbeat-interval =1s
	  	threshold = 12
	  	acceptable-heartbeat-pause = 60s
	  	expected-response-after=45s
	  }
	  
	  
	}
	
	
	akka.extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]
	actor.serializers{
		java = "akka.serialization.JavaSerializer"
		bytes = "akka.serialization.ByteArraySerializer"
	}
	actor.serialization-bindings{
		"[B" = bytes
		"java.io.Serializable" = java
		
	}
}
  cluster-dispatcher{
  	type = "Dispatcher"
  	executer = "fork-join-executer"
  	fork-join-executer{
  		parallelism-min=2
  		parallelism-max=4
  	}
  	
  }
